
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingWorker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Alana Warden
 */
public class ServerUI extends javax.swing.JFrame {
    String cat1,cat2,cat3;
    private static GameServerTCP server;
    private static ServerUI serverUI = new ServerUI();
    private Boolean sing;
    ArrayList<String> tempBlocked= new ArrayList<>();
   // private IpHandler iphandler;
    /**
     * Creates new form GUI
     */
    public ServerUI() {
        initComponents();
        this.getContentPane().setBackground(new Color(33,33,33));
        this.server=  new GameServerTCP();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        blockedUsers = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        usersConnected = new javax.swing.JTextArea();
        Category2 = new javax.swing.JTextField();
        Category3 = new javax.swing.JTextField();
        Category1 = new javax.swing.JTextField();
        run_btn = new javax.swing.JButton();
        disconnect_btn = new javax.swing.JButton();
        label1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        serverInfo = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        blockUser_textField = new javax.swing.JTextField();
        blockUser_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        blockedUsers.setEditable(false);
        blockedUsers.setColumns(20);
        blockedUsers.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        blockedUsers.setRows(5);
        jScrollPane1.setViewportView(blockedUsers);

        usersConnected.setEditable(false);
        usersConnected.setColumns(20);
        usersConnected.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        usersConnected.setRows(5);
        jScrollPane2.setViewportView(usersConnected);

        Category2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Category2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category2ActionPerformed(evt);
            }
        });

        Category3.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Category3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category3ActionPerformed(evt);
            }
        });

        Category1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Category1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category1ActionPerformed(evt);
            }
        });

        run_btn.setText("Run");
        run_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_btnActionPerformed(evt);
            }
        });

        disconnect_btn.setText("Disconnect");
        disconnect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnect_btnActionPerformed(evt);
            }
        });

        label1.setForeground(new java.awt.Color(255, 153, 153));
        label1.setText("Enter the file below:-");

        jLabel1.setForeground(new java.awt.Color(255, 153, 153));
        jLabel1.setText("More than one file may be entered in separate boxes");

        serverInfo.setEditable(false);
        serverInfo.setColumns(20);
        serverInfo.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        serverInfo.setRows(5);
        jScrollPane4.setViewportView(serverInfo);

        jLabel2.setForeground(new java.awt.Color(255, 153, 153));
        jLabel2.setText("Enter IP Address of user you want to block below:-");

        blockUser_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockUser_textFieldActionPerformed(evt);
            }
        });

        blockUser_btn.setText("Block User");
        blockUser_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockUser_btnActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 153, 153));
        jLabel3.setText("(add more than one by entering each IP and clicking Block User)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Category2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Category3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Category1, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 234, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(run_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(disconnect_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                                    .addComponent(blockUser_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(blockUser_textField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(150, 150, 150)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(109, 109, 109))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(69, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Category1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Category2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Category3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockUser_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockUser_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(run_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(disconnect_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Category2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category2ActionPerformed
        // TODO add your handling code here:
        
                
    }//GEN-LAST:event_Category2ActionPerformed

    private void Category1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category1ActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_Category1ActionPerformed

    private void Category3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category3ActionPerformed
        // TODO add your handling code here:
      
       
    }//GEN-LAST:event_Category3ActionPerformed

    private void run_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_btnActionPerformed
        // TODO add your handling code here:
//        System.out.println(Category1.getText());
//        System.out.println(Category2.getText());
//        System.out.println(Category3.getText());

        //store the cateogrys.gettext() (concat all 3) and send to the controller (ie dan)
        //declare controller that will have methods to interact between dan and me
        //String files = getCategory1() + "|_|" + getCategory2() + "|_|" + getCategory3();
        //send across files
        //show users connected and score :- sort in descending order by score
        
        //show blocked users
        //show server info: logging area (points for each user at each step), server running, # of categories being played
   
//        try{
////            //server.ServerSession();
////            //server.doprint();
////            SwingWorker<Void,oid> worker = new SwingWorker<void,void>(){
////
////                @Override
////                protected void doInBackground() throws Exception {
////                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
////                }
////                
////                
////            };
////            
////            worker.execute();
////        }
////        catch(Exception e){
////            serverInfo.setText("123"+e.toString());
////        }
//
//        
//        
//        
//        SwingWorker<Void,Void> worker = new SwingWorker<Void,Void>(){
//
//            //@Override
//            protected Void doInBackground() throws Exception {
//            //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//           
//                //server.doprint();
//                Thread.sleep(100);
//                
//                server.ServerSession(serverUI);
//               
//                return null;
//            }
//        
//        };
//        
//         worker.execute();   
        setrunwait(true);
        Category1.setEditable(false);
        Category2.setEditable(false);
        Category3.setEditable(false);
        blockUser_textField.setEditable(false);
        run_btn.setEnabled(false);
        blockUser_btn.setEnabled(false);
        
    }//GEN-LAST:event_run_btnActionPerformed

  public void setrunwait(Boolean sing)
  {
      this.sing=sing;
  }
  public Boolean getrunwait()
  {
     return this.sing;
  } 
    
    private void disconnect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnect_btnActionPerformed
        // TODO add your handling code here:
        setrunwait(false);
        System.exit(0);
    }//GEN-LAST:event_disconnect_btnActionPerformed

    private void blockUser_textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockUser_textFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blockUser_textFieldActionPerformed

    private void blockUser_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockUser_btnActionPerformed
        // TODO add your handling code here:
        String blocked = blockUser_textField.getText();
        tempBlocked.add(blocked);
        blockUser_textField.setText("");
        
    }//GEN-LAST:event_blockUser_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
             SwingWorker<Void,Void> worker = new SwingWorker<Void,Void>(){

            //@Override
            protected Void doInBackground() throws Exception {
            //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
           
                //server.doprint();
              //  Thread.sleep(1000);
                
                server.ServerSession(serverUI);
               
                return null;
            }
        
        };
        
         worker.execute();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Category1;
    private javax.swing.JTextField Category2;
    private javax.swing.JTextField Category3;
    private javax.swing.JButton blockUser_btn;
    private javax.swing.JTextField blockUser_textField;
    private javax.swing.JTextArea blockedUsers;
    private javax.swing.JButton disconnect_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel label1;
    private javax.swing.JButton run_btn;
    private javax.swing.JTextArea serverInfo;
    private javax.swing.JTextArea usersConnected;
    // End of variables declaration//GEN-END:variables

    //accessors and mutators
    
    public String getCategory1(){
        
        if(Category1.getText().isEmpty())
            return Category1.getText();
        else
            return "src/"+Category1.getText()+".txt";
    }
    
    public String getCategory2(){
        if(Category2.getText().isEmpty())
            return Category2.getText();
        else
            return "src/"+Category2.getText()+".txt";
    }
    
    public String getCategory3(){
        if(Category3.getText().isEmpty())
            return Category3.getText();
        else
            return "src/"+Category3.getText()+".txt";
    }
    
    public String getFiles(){
        String files = getCategory1() + "|_|" + getCategory2() + "|_|" + getCategory3();
        return files;
    }
    
    public ArrayList<String> getBlockedUsers(){
            return tempBlocked;
    }
    
    public void setUsersConnected(String user){
        usersConnected.setText(user);
    }
    
    public void setBlockedUsers(String blocked){
        blockedUsers.setText(blocked);
        //iphandler.addBlockedIPs(blocked);
    }
    
    public void setServerInfo(String logInfo){
        
       // serverInfo.setText("\n"+logInfo);
         serverInfo.append("\n"+logInfo);
        //serverInfo.update(serverInfo.getGraphics());
        System.out.println(logInfo);
    }


}
